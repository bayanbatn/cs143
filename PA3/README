README file for Programming Assignment 3 (Java edition)
======================================================

Your directory should now contain the following files:

 ASTConstants.java    -> [class dir]/src/PA3J/ASTConstants.java
 ASTLexer.java	      -> [class dir]/src/PA3J/ASTLexer.java
 ASTParser.java	      -> [class dir]/src/PA3J/ASTParser.java
 AbstractSymbol.java  -> [class dir]/src/PA3J/AbstractSymbol.java
 AbstractTable.java   -> [class dir]/src/PA3J/AbstractTable.java
 BoolConst.java       -> [course dir]/src/PA3J/BoolConst.java
 ClassTable.java
 Flags.java	      -> [class dir]/src/PA3J/Flags.java
 IdSymbol.java	      -> [class dir]/src/PA3J/IdSymbol.java
 IdTable.java	      -> [class dir]/src/PA3J/IdTable.java
 IntSymbol.java	      -> [class dir]/src/PA3J/IntSymbol.java
 IntTable.java	      -> [class dir]/src/PA3J/IntTable.java
 ListNode.java	      -> [class dir]/src/PA3J/ListNode.java
 Makefile	      -> [class dir]/etc/../assignments/PA3J/Makefile
 README
 Semant.java	      -> [class dir]/src/PA3J/Semant.java
 StringSymbol.java    -> [class dir]/src/PA3J/StringSymbol.java
 StringTable.java     -> [class dir]/src/PA3J/StringTable.java
 SymbolTable.java     -> [class dir]/src/PA3J/SymbolTable.java
 SymtabExample.java   -> [class dir]/src/PA3J/SymtabExample.java
 TokenConstants.java  -> [class dir]/src/PA3J/TokenConstants.java
 TreeConstants.java
 TreeNode.java	      -> [class dir]/src/PA3J/TreeNode.java
 Utilities.java	      -> [class dir]/src/PA3J/Utilities.java
 bad.cl
 cool-tree.aps	      -> [class dir]/src/PA3J/cool-tree.aps
 cool-tree.java
 good.cl

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. It is part of the assignment
	to clearly and concisely explain things in text as well as to
	comment your code.  Just edit this file.

	good.cl and bad.cl test a few features of the semantic checker.
	You should add tests to ensure that good.cl exercises as many
	legal semantic combinations as possible and that bad.cl
	exercises as many kinds of semantic errors as possible.

	cool-tree.aps contains the definitions for the tree language
	which you use to construct the abstract syntax tree (AST). This
	file is provided for your reference.  DO NOT MODIFY.

        TreeNode.java and ListNode.java contain definitions used by the
        tree package. DO NOT MODIFY.  

        cool-tree.java specifies and gives an implementation of Cool ASTs
        (see the README for PA3 and the "Cool Tour").  In this
        assignment, you will need to add functions to the AST classes to
        store, fetch, and compute information about the AST.

   	You should NOT remove any definitions that are already present
   	in cool-tree.java.  These function and data members are required
   	for the system to function properly.

        You should add any fields and methods to the classes you need to
        perform semantic analysis.  You will need to add, for example,
        methods which traverse the expressions of the tree and implement
        the type-checking rules.  The entry point to the semantic
        analyzer is program.semant().

	ClassTable.java implements a placeholder class for a few useful
	methods.  Feel free to extend it to implement some real data
	strucutre.

	TreeConstants.java defined some useful symbol constants.  You
	may add some of your own, if you wish.

	ASTLexer.java, ASTParser.java, and ASTConstants.java implement a
	lexer and a parser for reading text representation of ASTs from
	console in the format produced by the parser phase. DO NOT
	MODIFY.

        Semant.java contains a driver to test the analyzer.  The main
        method reads an AST in text form from standard input, parses it,
        and then produces a type-annotated AST on standard output.  The
        script mycoolc can pass any of the standard flags to the
        semantic analyzer as well; for this assignment, -s (semantic
        analysis debug) may be useful as it sets a static variable
        Flags.semant_debug to "true".  If you want your semantic checker
        to print debug information when the option is set, write your
        debug code in the following format:

	      if (Flags.semant_debug)
	      {
		...
	      }

	semant_debug is provided as a convenience. You don't need to use
	the debugging flags if you don't want to. DON'T MODIFY
	Semant.java

	SymbolTable.java contains a symbol table implementation. Read
	the comments in the file and look at the example in
	SymtabExample.java.  You are not required to use this code, but
	you may find it useful. DO NOT MODIFY.

Instructions
------------

	To compile the example use of the symbol table, type

	% gmake symtab-example

	This creates a shell script to run the symbol table example.

	To compile your semantic analyzer program type:

	% gmake semant

	To test your semantic checker, type:

	% mysemant foo.cl

	mysemant is a version of mycoolc that omits code generation.
	mysemant parses all the cool files given on the command line and
	builds a single abstract syntax tree containing all class
	definitions appearing in the input files. Your semantic checker
	is then called on this abstract syntax tree.  If there are no
	errors, the program produces a type-annotated abstract syntax
	tree as output.

	To run your checker on the files good.cl and bad.cl type:

	% gmake dotest

	If you think your semantic checker is correct and behaves like
	the one we wrote, you can try to run mycoolc using your checker,
	your parser and also your lexical analyzer if you choose (see
	below for instructions).  Remember if your lexer, parser or
	checker behaves in an unexpected manner, you may get errors
	anywhere.

	To turnin your work type:

	% gmake submit-clean

	And run the "submit" program following the instructions on the
	course web page.
	
	Running "submit" will collect the files cool-tree.java,
	ClassTable.java, TreeConstants.java, good.cl, bad.cl,
	good.output, bad.output, and README. Don't forget to edit the
	README file to include your write-up, and to write your own test
	cases in good.cl and bad.cl.

 	You may turn in the assignment as many times as you like.
 	However, only the last version will be retained for grading.

	If you change architectures you must issue

	% gmake clean

	when you switch from one type of machine to the other.
	If at some point you get weird errors from the linker,	
	you probably forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA4
---------------------------------------------------------------------
user: naranb

We perform the semantic analysis in 2 phases. The first phase involves
building up class hierarchy, and ensuring its correctness. The next
phase involves performing type checks on the AST tree, and generating
the type-annotated tree at the end. If errors are encountered along the
way, then we print out error indicators. 


Phase 1: Building class hierarchy
======================================================================
At this stage, we iterate through the list of classes in the program, 
and build up the graph structure. The graph is stored inside a map object.
A key-value pair corresponds to a parent-child pair in this scenario.
We include a group of primitive classes such as Int, String, IO, Object,
and Bool in this graph as well.

Once all parent-child pairs have been included, we validate the graph
structure. This involves several checks:
1) ensure graph is tree structure, with Object at the root.
2) no inheritence from Int, String, Bool or SELF_TYPE
3) no cycles within graph
4) no disjoint regions within graph
5) Main class is defined

Most of the above checks can performed with a DFS walk through the graph,
starting at root. This makes sure that all classes are descendant of Object,
and that graph is tree structured. Note that cool-syntax enforces one-parent 
per child, which necessarily means that if a cycle exists in the graph,
then it won't be reachable from Object. This also makes it easier to detect cycles
as we simply keep track of classes that we don't come across in our DFS walk.
Lastly, if a class inherits from an undefined graph, then this also means that
class is not part of the tree structure, and can also be detected the same way.


Phase 2: Type Checking
========================================================================
At this stage, we perform type checking. We do this with two passes over the 
AST tree. In the first pass, we collect type information on attributes and 
methods of all classes. This stage is necessary, as we need type information
on globally visible features such as methods before we can type check the
AST tree, the second stage of phase 2. 

In the first pass, we use a doubly nested map object to store type information
(first map uses class name as key, second map uses method/attr name as key, with
type info for value). We also ensure that attributes and methods have valid types
i.e. no undeclared types, and that inheritance of methods and attributes are
carried out appropriately. To facilitate the inheritance of features, we traverse
the list of classes again using a DFS, starting at root. Each child's feature type
table is a shallow copy of the parents feature type info. An incomplete list
of tasks we perform at this stage:
1) collect attr/method type/signature info
2) type information of attr/method are valid (f/ex no undefined types)
3) ensure no duplication of attr/method happens
4) ensure inheritance is carried out correctly (i.e. type info doesn't change)
5) ensure Main class has a main method
6) include self and SELF_TYPE as attributes for every class

For the second pass, we recurse through the AST tree. We use the symbol table
to carry scoping information for local variables (globals are accessed through
the maps I described earlier). The symbol table also contains type information
for the local variables. Note that new scope is created when:
1) entering a method (formals are local variables)
2) entering a let statement 
3) entering a case statement
When looking up an identifier, we look through the symbol table first (in LIFO
order), and then look at the global attr/method maps. If an identifier is not
found, then we declare error.

During the second pass, we also define a environment data structure that carries 
all necessary information for type checking, such as current class, symbol table, 
and the global attr/method maps. See more on this below. Type checking process 
itself follows the cool-manual's section on type checking rules. Outside of
following the type checking rules, some interesting challenges are:
1) subtyping
We use the inheritance graph to check subtype relationships. Additionally,
we handle special cases such as when SELF_TYPE and No_type are passed in.
SELF_TYPE subtyping behaves as described in lecture. No_type is considered
to be a subtype of all classes, although it is not explicitly included in the
inheritance graph.
2) LUB 
We also use the inheritance graph to compute LUB. As with subtyping, we also
handle special cases when SELF_TYPE and No_type are passed in. SELF_TYPE 
LUB computation behaves as described in lecture. No_type is considered subtype
of all classes: therefore, whatever the second class is, is returned as LUB.


Error recovery
============================================================================
At the first phase, if error is detected, we finish processing the phase, 
and return without performing type checking. At this phase, we can recover
from any inheritance level semantic errors, and were able to catch more
errors than the reference solution in most cases.

At the second phase, we use the compiler's No_type when recovering from error.
This works great when preventing cascading error once an error has been detected
at low levels. In general, No_type behaves optimistically, assuming that
whatever type that it is replacing would behave correctly once fixed, since
No_type will pass any subtyping tests, and will always return the most generic
type when used to compute LUB. We use No_type in the following cases:
1) object type not found
2) "new" expression with invalid
3) "assign" when expr evaluates to invalid type (not subtype)
4) let/case statements where declared type is invalid
5) return type of dispatch, when expression evaluates to No_type
... (i'm sure there are others, but i'm running out of time :) )
In case of static dispatch, we simply used the declared type, and assume that
the correct value of the expression would've been a subtype of it. In the case
of normal dispatch, since we have no type information, we have no choice but
to also declare the return type of the method No_type.

We don't use No_type when there's opportunity for better error recovery mechanism.
For example, with operations such as +-/*, outcome will always be Int, regardless
of type errors within operands. Therefore, it makes more sense to return 
Int in those cases than to return No_type. Similar reasoning applies to other
expression types such as "<", "<=", "=", and so on.


Notable data structures used
============================================================================
-- ClassTable:
I overloaded the use of this data structure. In phase 1, when building the
class hierarchy, classtable is used to hold the class graph structure. Additionally
classtable acts as the program environment in the second phase of the program,
and contains the symbol table (for storing local var type infor), method/attr maps
(for global vars), and a pointer to the current class when traversing the AST tree
in the second stage of Phase 2. The program environment related datastructures
are stored public, for ease of access. Some other non-trivial tasks performed
by classtable:
1) check subtyping (uses inheritance graph)
2) compute LUB (uses inheritance graph)
3) check validity of types (makes sure they are defined somewhere) (uses inheritance
    graph)

-- Symbol table:
Used to store local variable info. Provided in starter code.

-- Global attr/method maps:
Implemented using a doubly nested map. Serves as a mapping:
(class, attr/method) => (type/signature info)
Using a nested map also makes it easy to perform shallow copies of 
attr/method type info from parent classes. 

-- Inheritance graph:
Implemented as a Map<AbstractSymbol, AbstractTable> object,
mapping parent class name to child class name. 


Testing
==========================================================================
I have written severel cool files to test various aspects of the semantics of
cool. In addition, I have tested this submission over examples files provided
by the class. To simplify the process of testing, I have written a script
for batch processing directories food of cool files (named 'examples_test_parser',
if interested).

In terms of organization, I tried to write a good/bad cool file for every component
of cool semantics, ranging from scoping, to inheritance, to subtyping and LUB
computation, etc. See "mytests" directory for these files.
