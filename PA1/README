README file for Programming Assignment 1 (Java edition)
=======================================================

Your directory should now contain the following files:

 Makefile
 README
 cool.lex
 test.cl
 AbstractSymbol.java  -> [course dir]/src/PA1J/AbstractSymbol.java
 BoolConst.java       -> [course dir]/src/PA1J/BoolConst.java
 Flags.java           -> [course dir]/src/PA1J/Flags.java
 IdSymbol.java        -> [course dir]/src/PA1J/IdSymbol.java
 IdTable.java         -> [course dir]/src/PA1J/IdTable.java
 IntSymbol.java       -> [course dir]/src/PA1J/IntSymbol.java
 IntTable.java        -> [course dir]/src/PA1J/IntTable.java
 Lexer.java           -> [course dir]/src/PA1J/Lexer.java
 AbstractTable.java   -> [course dir]/src/PA1J/AbstractTable.java
 StringSymbol.java    -> [course dir]/src/PA1J/StringSymbol.java
 StringTable.java     -> [course dir]/src/PA1J/StringTable.java
 Utilities.java       -> [course dir]/src/PA1J/Utilities.java
 TokenConstants.java  -> [course dir]/src/PA1J/TokenConstants.java
 *.java		      other generated files

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. It is part of the assignment
	to clearly and concisely explain things in text as well as to
	comment your code. Just edit this file.

	cool.lex is a skeleton file for the specification of the
	lexical analyzer. You should complete it with your regular
	expressions, patterns and actions. 

	test.cl is a COOL program that you can test the lexical
	analyzer on. It contains some errors, so it won't compile with
	coolc. However, test.cl does not exercise all lexical
	constructs of COOL and part of your assignment is to rewrite
	test.cl with a complete set of tests for your lexical analyzer.

	TokenConstants.java contains constant definitions that are used by
	almost all parts of the compiler. DO NOT MODIFY.

	*Table.java and *Symbol.java contain string table data
	structures.  DO NOT MODIFY.

	Utilities.java contains various support functions used by the
	main lexer driver (Lexer.java).  DO NOT MODIFY.

	Lexer.java contains the main method which will call your lexer
	and print out the tokens that it returns.  DO NOT MODIFY.

        CoolLexer.java is the scanner generated by jlex from cool.lex.
        DO NOT MODIFY IT, as your changes will be overritten the next
        time you run jlex.

	mycoolc is a shell script that glues together the phases of the
	compiler using Unix pipes instead of statically linking code.  
	While inefficient, this architecture makes it easy to mix and match
	the components you write with those of the course compiler.
	DO NOT MODIFY.	

Instructions
------------

	To compile your lextest program type:

	% make lexer

	Run your lexer by putting your test input in a file 'foo.cl' and
	run the lextest program:

	% lexer foo.cl

	To run your lexer on the file test.cl type:

	% make dotest

	If you think your lexical analyzer is correct and behaves like
	the one we wrote, you can actually try 'mycoolc' and see whether
	it runs and produces correct code for any examples.
	If your lexical analyzer behaves in an
	unexpected manner, you may get errors anywhere, i.e. during
	parsing, during semantic analysis, during code generation or
	only when you run the produced code on spim. So beware.

	To turnin your work type:

	% make submit

	Running "submit" will collect the files cool.lex, test.cl,
	README, and test.output. Don't forget to edit the README file to
	include your write-up, and to write your own test cases in
	test.cl.

 	You may turn in the assignment as many times as you like.
	However, only the last version will be retained for
	grading.

	If you change architectures you must issue

	% make clean

	when you switch from one type of machine to the other.


	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

user: naranb

Write-up for PA1J
-----------------
I'm breaking this readme into the following sections.

** States:
In addition to the default YYINITIAL state, I define 3 new states:
STRING_STATE, LINE_COMMENT, and BLOCK_COMMENT. These states are activated
when we encounter special characters ("\"" for string, and "\(\*" and "--"
for comments). 

** Regex matching:
Most regex matches are handled by returning an AbstractSymbol object. The 
interesting scenarios are when we handles comments and string constants.

We enter the STRING_STATE when we encounter a quotes character. The rest of the
string constant is caught through a single regular expression that ensures that
the string ends only with either a unescaped quotes character, or unescaped
newline, or the EOF signal.

Inside the STRING_STATE, we handle proper formatting and error detection.
For formatting, we deal with things such as escaped characters and parse
out the escape sign (backslash) where necessary, and combine the escape
sign with the character where appropriate. For error detection, we check to
see if the last character is EOF or newline. In either of those cases, error
is thrown. We also check for invalid characters such as \0, and throw
error when they are detected. Lastly, we check the length of the parsed
string at the end, and if it exceeds the MAX_LENGTH, then we throw an error.

We handle comments inside the LINE_COMMENT and BLOCK_COMMENT states. We enter
these states when either -- or (* are detected. Handling LINE_COMMENT is relatively
simple; we disregard everything that follows after the beginning of the comment,
and exit the LINE_COMMENT state when a new line character is encountered.

On the other hand, in the block comment state, we do additional regex matching
to distinguish disregarded characters from especial tokens such as (* and *).
We use a variable to keep track of the depth of the comments, in order to handle
nested comments. Additionally, we match all new line characters, in order to keep
the line number up to date. We exit from the BLOCK_COMMENT state when the depth
of the comment goes back to 0. 

** Error Handling:
EOF are handled inside the eofval{} block for comments. If we are in a comment 
state, reading EOF will result in an error symbol being generated. We then 
return the normal EOF symbol after next_token() is called once more. To ensure
that EOF is returned normally on this second call, we set the state back to 
YYINITIAL before reporting the error.

If EOF is reached in the STRING_STATE, we detect it using regex matching,
and generate the "EOF in string const". We then switch over to YYINITIAL
state, which returns the normal EOF symbol.


** Testing:
We performed testing for matching both keywords as well as various formats of
string constants and comments. See test.cl for details.
