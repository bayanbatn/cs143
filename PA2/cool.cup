/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program; 
nonterminal class_c class;
nonterminal Classes class_list;
nonterminal Feature feature;
nonterminal Features feature_list; 
nonterminal Features non_empty_feature_list;
nonterminal formalc formal;
nonterminal Formals formal_list;
nonterminal Formals non_empty_formal_list;
nonterminal Expression expression;
nonterminal Expression let_expr_end;
nonterminal Expressions expression_list;
nonterminal Expressions non_empty_expr_list;
nonterminal Expressions sc_separated_expr_list;
nonterminal branch case;
nonterminal Cases case_list;

/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc EQ, LT, LE;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left DOT;
precedence left AT;

/* Grammer */
program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:feli RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   feli, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:feli RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, feli, curr_filename()); :}
        /* handles class declaration error */
        | error LBRACE feature_list:feli RBRACE SEMI 
            // return dummy class
            {: RESULT = new class_c(curr_lineno(), 
                                    AbstractTable.idtable.addString("Object"),
                                    AbstractTable.idtable.addString("Object"),
                                    feli, curr_filename()); :}
	;


/* Feature list may be empty, but no empty features in list. */
feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
        /* non-empty */
        | non_empty_feature_list:feli
            {: RESULT = feli; :}
	;

non_empty_feature_list
        ::= feature:f
	    {: RESULT = new Features(curr_lineno()).appendElement(f); :}
        | non_empty_feature_list:feli feature:f
            {: RESULT = feli.appendElement(f); :}
        ;

/* Match against feature */
feature
        /* Method rules */
        ::= OBJECTID:oid LPAREN formal_list:foli RPAREN COLON TYPEID:tid LBRACE expression:e RBRACE SEMI
            {: RESULT = new method(curr_lineno(), oid, foli, tid, e);  :}
        /* handle errors in method */
        | error expression:e RBRACE SEMI
            {: RESULT = new method(curr_lineno(), 
                                   AbstractTable.idtable.addString("object"),
                                   new Formals(curr_lineno()),
                                   AbstractTable.idtable.addString("Object"),
                                   e); :}
        /* Attribute rules */
        | OBJECTID:oid COLON TYPEID:tid SEMI
            {: RESULT = new attr(curr_lineno(), oid, tid, new no_expr(curr_lineno())); :} 
        | OBJECTID:oid COLON  TYPEID:tid ASSIGN expression:e SEMI
            {: RESULT = new attr(curr_lineno(), oid, tid, e); :}
        /* handle errors in attribute rules */
        | error expression:e SEMI
            {: RESULT = new attr(curr_lineno(), 
                                 AbstractTable.idtable.addString("object"),
                                 AbstractTable.idtable.addString("Object"),
                                 e); :}
        | error SEMI
            {: RESULT = new attr(curr_lineno(),
                                 AbstractTable.idtable.addString("object"),
                                 AbstractTable.idtable.addString("Object"),
                                 new no_expr(curr_lineno())); :}
        ;

/* Formal lists, separated by formats */
formal_list
        ::= /* empty */
            {: RESULT = new Formals(curr_lineno()); :}
        | non_empty_formal_list:foli
            {: RESULT = foli; :}
        ;

non_empty_formal_list
        ::= formal:f 
            {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
        | non_empty_formal_list:foli COMMA formal:f
            {: RESULT = foli.appendElement(f); :}
        ;

formal
        ::= OBJECTID:oid COLON TYPEID:tid
            {: RESULT = new formalc(curr_lineno(), oid, tid); :}
        ;


/* Expression lists : different formats */
expression_list
        ::= /* empty */
            {: RESULT = new Expressions(curr_lineno()); :}
        | non_empty_expr_list:eli
            {: RESULT = eli; :}
        ;

non_empty_expr_list
        ::= expression:e
            {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
        | non_empty_expr_list:eli COMMA expression:e
            {: RESULT = eli.appendElement(e); :}
        ;

sc_separated_expr_list
        ::= expression:e SEMI
            {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
        | sc_separated_expr_list:eli expression:e SEMI
            {: RESULT = eli.appendElement(e); :}
        /* handle errors inside block statements 
         * skip over all statements with error by parsing
         * with the semicolons.
         */
        | sc_separated_expr_list:eli error SEMI
            {: RESULT = eli; :}
        | error SEMI
            {: RESULT = new Expressions(curr_lineno()); :}
        | error
            {: RESULT = new Expressions(curr_lineno()); :}
        ;

/* Case lists, must be non-empty */
case_list
        ::= case:c
            {: RESULT = (new Cases(curr_lineno())).appendElement(c); :}
        | case_list:cli case:c
            {: RESULT = cli.appendElement(c); :}
        ;

/* Case statement */
case
        ::= OBJECTID:oid COLON TYPEID:tid DARROW expression:e SEMI
            {: RESULT = new branch(curr_lineno(), oid, tid, e); :}
        ;

/* Special grammer to handle let statements */
let_expr_end
        ::= COMMA OBJECTID:oid COLON TYPEID:tid ASSIGN expression:e1 let_expr_end:e2
            {: RESULT = new let(curr_lineno(), oid, tid, e1, e2); :}
        | COMMA OBJECTID:oid COLON TYPEID:tid let_expr_end:e2
            {: RESULT = new let(curr_lineno(), oid, tid, new no_expr(curr_lineno()), e2); :}
        | IN expression:e
            {: RESULT = e; :}
        /* handle error inside let expression
         * skip over to the next variable in let if error is detected
         * skip over to main body if no variable declarations are left
         */
        | error let_expr_end:e
            {: RESULT = e; :}
        ;

/* Expressions */
expression
        /* assign expression */
        ::= OBJECTID:oid ASSIGN expression:e
            {: RESULT = new assign(curr_lineno(), oid, e); :}

        /* dispatch with optional cast */
        | expression:e AT TYPEID:tid DOT OBJECTID:oid LPAREN expression_list:eli RPAREN
            {: RESULT = new static_dispatch(curr_lineno(), e, tid, oid, eli); :}

        /* dispatch without optional cast */
        | expression:e DOT OBJECTID:oid LPAREN expression_list:eli RPAREN
            {: RESULT = new dispatch(curr_lineno(), e, oid, eli); :}
        | OBJECTID:oid LPAREN expression_list:eli RPAREN 
            {: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), oid, eli); :} 

        /* IF expression */
        | IF expression:e1 THEN expression:e2 ELSE expression:e3 FI
            {: RESULT = new cond(curr_lineno(), e1, e2, e3); :}

        /* WHILE expression */
        | WHILE expression:e1 LOOP expression:e2 POOL
            {: RESULT = new loop(curr_lineno(), e1, e2); :}

        /* BLOCK expression 
         * error handling is done inside sc_separated_expr_list
         */
        | LBRACE sc_separated_expr_list:eli RBRACE 
            {: RESULT = new block(curr_lineno(), eli); :}

        /* LET expression, with optional init */
        | LET OBJECTID:oid COLON TYPEID:tid ASSIGN expression:e1 let_expr_end:e2
            {: RESULT = new let(curr_lineno(), oid, tid, e1, e2); :}  

        /* LET expression, without optional init to first arg */
        | LET OBJECTID:oid COLON TYPEID:tid let_expr_end:e2
            {: RESULT = new let(curr_lineno(), oid, tid, new no_expr(curr_lineno()), e2); :}  

        /* handle errors in LET expression 
         * skip over to the next variable in let if error is detected
         * skip over to main body if no variable declarations are left
         */
        | LET error let_expr_end:e 
            {: RESULT = e; :}

        /* CASE expression */ 
        | CASE expression:e OF case_list:cli ESAC
            {: RESULT = new typcase(curr_lineno(), e, cli); :}

        | NEW TYPEID:tid
            {: RESULT = new new_(curr_lineno(), tid); :}

        | ISVOID expression:e
            {: RESULT = new isvoid(curr_lineno(), e); :}

        | expression:e1 PLUS expression:e2
            {: RESULT = new plus(curr_lineno(), e1, e2); :}

        | expression:e1 MINUS expression:e2
            {: RESULT = new sub(curr_lineno(), e1, e2); :}

        | expression:e1 MULT expression:e2
            {: RESULT = new mul(curr_lineno(), e1, e2); :}

        | expression:e1 DIV expression:e2
            {: RESULT = new divide(curr_lineno(), e1, e2); :}

        | NEG expression:e
            {: RESULT = new neg(curr_lineno(), e); :}

        | expression:e1 LT expression:e2
            {: RESULT = new lt(curr_lineno(), e1, e2); :}

        | expression:e1 LE expression:e2
            {: RESULT = new leq(curr_lineno(), e1, e2); :}

        | expression:e1 EQ expression:e2
            {: RESULT = new eq(curr_lineno(), e1, e2); :}

        | NOT expression:e
            {: RESULT = new comp(curr_lineno(), e); :}

        | LPAREN expression:e RPAREN
            {: RESULT = e; :}

        | OBJECTID:oid
            {: RESULT = new object(curr_lineno(), oid); :}

        | INT_CONST:i
            {: RESULT = new int_const(curr_lineno(), i); :}

        | STR_CONST:s
            {: RESULT = new string_const(curr_lineno(), s); :}

        | BOOL_CONST:b
            {: RESULT = new bool_const(curr_lineno(), b); :}
        ;




